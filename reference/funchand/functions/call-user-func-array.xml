<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5832a97c699c5e1bc808ee900447fe751af0d540 Maintainer: zhoumengkang Status: ready -->
<!-- CREDITS: Luffy, mowangjuanzi -->
<refentry xml:id="function.call-user-func-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func_array</refname>
  <refpurpose>调用回调函数，并把一个数组参数作为回调函数的参数</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func_array</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   把第一个参数作为回调函数（<parameter>callback</parameter>）调用，把参数数组作（<parameter>args</parameter>）为回调函数的的参数传入。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       被调用的回调函数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       要被传入回调函数的数组。
      </para>
      <para>
       如果 <parameter>args</parameter> 的 key 都是数字，则会忽略 key，并按顺序将每个元素作为位置参数传递给 <parameter>callback</parameter> 。
      </para>
      <para>
       如果 <parameter>args</parameter> 的任一 key 是字符串，则这些元素将作为命名参数传递给 <parameter>callback</parameter>，名称由 key 指定。
      </para>
      <para>
       在 <parameter>args</parameter> 中，如果数字 key 在 字符串 key 之后出现，或者字符串 key
       与 <parameter>callback</parameter> 的任何参数名称不匹配，将会导致 fatal error。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回回调函数的结果。如果出错的话就返回 &false; 。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>args</parameter> 键现在将被解释为参数名称，而不是被默默地忽略。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>call_user_func_array</function>例子</title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " got $arg and $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " got $arg and $arg2\n";
    }
}


// Call the foobar() function with 2 arguments
call_user_func_array("foobar", array("one", "two"));

// Call the $foo->bar() method with 2 arguments
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("three", "four"));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar got one and two
foo::bar got three and four
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function>使用命名空间的情况</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print "Hello {$name}!\n";
    }
}

call_user_func_array(__NAMESPACE__ .'\Foo::test', array('Hannes'));

call_user_func_array(array(__NAMESPACE__ .'\Foo', 'test'), array('Philip'));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Hello Hannes!
Hello Philip!
]]>
    </screen>
   </example>
   <example>
    <title>把完整的函数作为回调传入<function>call_user_func_array</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$func = function($arg1, $arg2) {
    return $arg1 * $arg2;
};

var_dump(call_user_func_array($func, array(2, 4)));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(8)
]]>
    </screen>
   </example>
   <example>
    <title>传引用</title>
    <programlisting role="php">
<![CDATA[
<?php

function mega(&$a){
    $a = 55;
    echo "function mega \$a=$a\n";
}
$bar = 77;
call_user_func_array('mega',array(&$bar));
echo "global \$bar=$bar\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
function mega $a=55
global $bar=55
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function> 使用命名参数</title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($first, $second) {
    echo __FUNCTION__, " got $first and $second\n";
}

// Call the foobar() function with named arguments in non-positional order
call_user_func_array("foobar", array("second" => "two", "first" => "one"));

// Call the foobar() function with one named argument
call_user_func_array("foobar", array("foo", "second" => "bar"));

// Fatal error: Cannot use positional argument after named argument
call_user_func_array("foobar", array("first" => "one", "bar"));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar got one and two
foobar got foo and bar

Fatal error: Uncaught Error: Cannot use positional argument after named argument
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.func-callback-exceptions;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><methodname>ReflectionFunction::invokeArgs</methodname></member>
    <member><methodname>ReflectionMethod::invokeArgs</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
